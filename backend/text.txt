// Import required modules
const express = require('express');  // Express is a web application framework for Node.js.
const mongoose = require('mongoose'); // Mongoose is an ODM library for MongoDB and Node.js.
const cors = require('cors'); // CORS is a middleware for handling Cross-Origin Resource Sharing.

// Create an instance of Express
const app = express();

// Define the port for the server, use the provided environment variable or default to 5000
const PORT = process.env.PORT || 5000;

// Use CORS middleware to enable cross-origin resource sharing
app.use(cors());

// Use Express middleware to parse JSON data in the request body
app.use(express.json());

// Connect to MongoDB using Mongoose
mongoose.connect('mongodb://localhost:27017/your-database-name', {
  useNewUrlParser: true,
  useUnifiedTopology: true,
});

// Define a simple Mongoose schema for an "Item" with a single field "name"
const itemSchema = new mongoose.Schema({
  name: String,
});

// Create a Mongoose model based on the schema, representing a collection named "items"
const Item = mongoose.model('Item', itemSchema);

// Define routes for the API

// GET request to retrieve all items from the MongoDB collection
app.get('/api/items', async (req, res) => {
  const items = await Item.find(); // Use the Mongoose model to find all items in the collection
  res.json(items); // Send the retrieved items as a JSON response
});

// POST request to add a new item to the MongoDB collection
app.post('/api/items', async (req, res) => {
  const newItem = new Item(req.body); // Create a new Mongoose model instance based on the request body
  await newItem.save(); // Save the new item to the MongoDB collection
  res.json(newItem); // Send the saved item as a JSON response
});

// DELETE request to delete an item from the MongoDB collection based on its ID
app.delete('/api/items/:id', async (req, res) => {
  const { id } = req.params; // Extract the item ID from the request parameters
  await Item.findByIdAndDelete(id); // Find and delete the item by its ID
  res.json({ message: 'Item deleted' }); // Send a JSON response indicating successful deletion
});

// Start the Express server and listen on the specified port
app.listen(PORT, () => {
  console.log(`Server is running on port ${PORT}`);
});